<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetBrowser.Core</name>
    </assembly>
    <members>
        <member name="M:DotNetBrowser.Browser.Widgets.BrowserWidgetRpcService.OnShowDropdown(DotNetBrowser.Browser.Internal.Rpc.ShowDropdown.Request)">
            <summary>
                <para>
                    This RPC callback can be used for displaying custom combo box drop-downs.
                    On Windows and Linux, the "select" lists are rendered by Blink, so
                    the Chromium is responsible for creating a native window that is used
                    as a drop-down canvas. On macOS, such widgets are shown by Cocoa API.
                </para>
                <para>
                    However, Chromium provides a possibility to select the way of displaying
                    the drop-downs. After specifying the "--enable-custom-dropdowns"
                    switch, the drop-downs are no longer displayed by Chromium - this RPC
                    callback is used instead.
                </para>
                <para>
                    This option can be useful for the cases when we cannot determine
                    the parent window handle to display the drop-down in a proper location
                    by the UI framework means.
                </para>
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.Widgets.IPaintable.PaintHandler">
            <summary>
                The handler which is used when the contents were changed and the UI component should be repainted.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.INsView.Show(System.Int64,DotNetBrowser.Geometry.Rectangle)">
            Attaches this view to the parent view and makes it visible.
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.NsView.Show(System.Int64,DotNetBrowser.Geometry.Rectangle)">
            <summary>
                Attaches this view to the parent view and makes it visible.
            </summary>
            <param name="parentViewId">The parent NSView identifier.</param>
            <param name="bounds">The initial bounds.</param>
            <exception cref="T:System.ArgumentException">The parent view ID is 0.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.NsView.UpdateBounds(DotNetBrowser.Geometry.Rectangle)">
            <summary>
                Updated the NSView bounds.
            </summary>
            <param name="bounds">The bounds relative to the parent NSView.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.NsView.UpdateSurface(DotNetBrowser.Geometry.Size,System.Single,DotNetBrowser.Internal.Rpc.MemoryId,System.Boolean)">
            <summary>
                Replaces the content of this view with the pixels from the shared memory specified by
                <paramref name="memoryId" />.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.NsView.SetNsViewLayer(System.UInt32,System.Single,System.Boolean)">
            <summary>
            Replaces the content of this view with the content of the remote Core Animation
            specified by <paramref name="contextId"/> and optionally draws a border around the view.
            </summary>
            <param name="contextId">The context ID.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="drawBorder"><c>true</c> if the border should be drawn, <c>false</c> otherwise.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.Widgets.Mac.NsView.UpdateSurface(System.Int64,System.Single,System.Boolean)">
            <summary>
                Replaces the content of this view with the IoSurface specified by <paramref name="surfaceId" /> and
                optionally draws a border around the view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Cache.HttpCacheRpcService.Size">
            <summary>
                Gets the size of cached objects in bytes. For testing purposes.
            </summary>
            <value>
                The size of cached objects in bytes.
            </value>
        </member>
        <member name="T:DotNetBrowser.Chromium.ChromiumBinariesExtractor">
            <summary>
                A tool that is used to extract the corresponding Chromium binaries.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Chromium.ChromiumBinariesExtractor.DefaultChromiumDirectory">
            <summary>
                The default directory that will be used for binaries extraction
                if a different location is not specified in the <see cref="P:DotNetBrowser.Engine.EngineOptions.ChromiumDirectory" />.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Chromium.ChromiumBinariesExtractor.#ctor(DotNetBrowser.Engine.BinariesExtractionOptions)">
            <summary>
                Creates and initializes an instance of <see cref="T:DotNetBrowser.Chromium.ChromiumBinariesExtractor" />.
            </summary>
            <param name="extractionOptions">the extraction options that are used to configure the binaries extractor.</param>
        </member>
        <member name="M:DotNetBrowser.Chromium.ChromiumBinariesExtractor.ExtractBinariesIfNecessary(DotNetBrowser.Engine.EngineOptions)">
            <summary>
                Locate and extract the Chromium binaries if the corresponding binaries were not extracted yet
                or cannot be found at the location specified in <see cref="P:DotNetBrowser.Engine.EngineOptions.ChromiumDirectory" />.
                <para>
                    If the <see cref="P:DotNetBrowser.Engine.EngineOptions.ChromiumDirectory" /> is not specified, the
                    <see cref="P:DotNetBrowser.Chromium.ChromiumBinariesExtractor.DefaultChromiumDirectory" /> value will be used for binaries extraction.
                </para>
            </summary>
            <param name="options">the <see cref="T:DotNetBrowser.Engine.EngineOptions" /> instance to use.</param>
        </member>
        <member name="T:DotNetBrowser.Chromium.ChromiumInfo">
            <summary>
                Provides information about the Chromium engine used in DotNetBrowser.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Chromium.ChromiumInfo.Version">
            <summary>
                The current version of the underlying Chromium engine.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Dom.Events.KeyEventType">
            <summary>
                Represents the key event types.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Engine.EngineFactory">
            <summary>
                Factory class that is used to create <see cref="T:DotNetBrowser.Engine.IEngine" /> instances.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.Create(DotNetBrowser.Engine.EngineOptions)">
            <summary>
                Creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <param name="options">The <see cref="T:DotNetBrowser.Engine.EngineOptions" /> instance that will be used for initializing the engine</param>
            <returns>A completely initialized Chromium engine.</returns>
            <exception cref="T:DotNetBrowser.Engine.EngineInitializationException">The <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some reason.</exception>
            <example>
                <code source="../DotNetBrowser.Core.Test/EngineServiceTest.cs" region="EngineFactory.Create Sample" lang="C#"
                    title="Create IEngine" />
            </example>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.Create(DotNetBrowser.Engine.RenderingMode)">
            <summary>
                Creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <param name="renderingMode">
                The <see cref="T:DotNetBrowser.Engine.RenderingMode">rendering mode</see> that will be used for initializing the engine.
            </param>
            <returns>A completely initialized Chromium engine.</returns>
            <exception cref="T:DotNetBrowser.Engine.EngineInitializationException">The <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some reason.</exception>
            <remarks>
                Calling this method is equivalent to calling the <see cref="M:DotNetBrowser.Engine.EngineFactory.Create(DotNetBrowser.Engine.EngineOptions)" />
                method with the <see cref="T:DotNetBrowser.Engine.EngineOptions" /> built by calling
                <c>new EngineOptions.Builder().Build()</c> with the <see cref="T:DotNetBrowser.Engine.RenderingMode">rendering mode</see> specified.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.Create">
            <summary>
                Creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <returns>A completely initialized Chromium engine.</returns>
            <exception cref="T:DotNetBrowser.Engine.EngineInitializationException">The <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some reason.</exception>
            <remarks>
                Calling this method is equivalent to calling the <see cref="M:DotNetBrowser.Engine.EngineFactory.Create(DotNetBrowser.Engine.EngineOptions)" /> method
                with the <see cref="T:DotNetBrowser.Engine.EngineOptions" /> built by calling <c>new EngineOptions.Builder().Build()</c>.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.CreateAsync">
            <summary>
                Asynchronously creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <returns>
                A task which returns an initialized Chromium engine on completion. The task can throw
                <see cref="T:DotNetBrowser.Engine.EngineInitializationException" /> if the <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some
                reason.
            </returns>
            <remarks>
                Calling this method is equivalent to calling the <see cref="M:DotNetBrowser.Engine.EngineFactory.CreateAsync(DotNetBrowser.Engine.EngineOptions)" />
                method with the <see cref="T:DotNetBrowser.Engine.EngineOptions" /> built by calling <c>new EngineOptions.Builder().Build()</c>.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.CreateAsync(DotNetBrowser.Engine.EngineOptions)">
            <summary>
                Asynchronously creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <param name="options">The <see cref="T:DotNetBrowser.Engine.EngineOptions" /> instance that will be used for initializing the engine</param>
            <returns>
                A task which returns an initialized Chromium engine on completion. The task can throw
                <see cref="T:DotNetBrowser.Engine.EngineInitializationException" /> if the <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some
                reason.
            </returns>
            <example>
                <code source="../DotNetBrowser.Core.Test/EngineServiceTest.cs" region="EngineFactory.CreateAsync Sample" lang="C#"
                    title="Create IEngine" />
            </example>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineFactory.CreateAsync(DotNetBrowser.Engine.RenderingMode)">
            <summary>
                Asynchronously creates and returns an <see cref="T:DotNetBrowser.Engine.IEngine" /> instance.
            </summary>
            <param name="renderingMode">The <see cref="T:DotNetBrowser.Engine.RenderingMode" /> that will be used for initializing the engine</param>
            <returns>
                A task, which returns an initialized Chromium engine on completion. The task can throw
                <see cref="T:DotNetBrowser.Engine.EngineInitializationException" /> if the <see cref="T:DotNetBrowser.Engine.IEngine" /> initialization has failed for some
                reason.
            </returns>
            <remarks>
                Calling this method is equivalent to calling the <see cref="M:DotNetBrowser.Engine.EngineFactory.CreateAsync(DotNetBrowser.Engine.EngineOptions)" />
                method with the <see cref="T:DotNetBrowser.Engine.EngineOptions" /> built by calling
                <c>new EngineOptions.Builder().Build()</c> with the <see cref="T:DotNetBrowser.Engine.RenderingMode">rendering mode</see> specified.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Engine.EngineRpcService.Crash">
            <summary>
                This method is used for testing purposes only.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Engine.OnScreenKeyboard.OnScreenKeyboardRpcService">
            <summary>
                Dispatches on-screen keyboard events between OS and Chromium engine.
                <para>
                    This is a simple proxy between Chromium and .Net processes. The standard
                    Chromium implementation requests on-screen operations assuming that these requests will
                    be handled by the same process. However, DotNetBrowser has an out-of-process model, so these kinds of
                    requests cannot be handled by Chromium process.Therefore, we redirect on-screen keyboard
                    requests to .NET and process them in PInvoke code. And vice versa, the notifications from the
                    OS about changing of on-screen keyboard visibility state are dispatched to Chromium
                    using this class.
                </para>
            </summary>
        </member>
        <member name="P:DotNetBrowser.Js.JsContext.ObjectInfo.Fields">
            <summary>
                Gets object public fields.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Js.JsContext.ObjectInfo.Members">
            <summary>
                Gets all object public members.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Js.JsContext.ObjectInfo.Methods">
            <summary>
                Gets object public methods.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Js.JsContext.ObjectInfo.Properties">
            <summary>
                Gets object public properties.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Navigation.LoadRequestsQueue.SetLoadingResult(DotNetBrowser.Navigation.NavigationResult,System.String,System.Int64)">
            <summary>
                Sets the LoadResult to the latest LoadRequest.
            </summary>
            <param name="result">The load result to set.</param>
            <param name="cause">
                The description of the cause that led to setting this load result. Usually, the cause
                is a load event with some particular parameters.
            </param>
            <param name="ticks">
                The timestamp (in ticks) when the causing event was received. This timestamp is used to ignore the
                outdated events.
            </param>
        </member>
        <member name="T:DotNetBrowser.Net.Certificates.Cryptography.Asn1Tag">
            <summary>
                ASN.1 universal tags
            </summary>
        </member>
        <member name="T:DotNetBrowser.Net.Certificates.Cryptography.Asn1Node">
            <summary>
                This class represents a data structure in ASN.1.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Net.Certificates.PrivateKeyConverter">
            <summary>
                This converter converts the private key defined by its parameters
                to its DER encoded PKCS#8 form.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Input.Mouse.MouseExtensions">
            <summary>
                The mouse input simulation service extension methods.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Input.Mouse.MouseExtensions.SimulateClick(DotNetBrowser.Input.Mouse.IMouse,DotNetBrowser.Input.Mouse.Events.MouseButton,DotNetBrowser.Geometry.Point)">
            <summary>
                Simulate mouse button click at the specified location.
            </summary>
            <param name="mouse">The mouse input simulation service.</param>
            <param name="mouseButton">The mouse button that should be used for clicking.</param>
            <param name="location">The mouse pointer location relative to the top left corner of the browser.</param>
            <remarks>
                The mouse click is simulated by raising <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Moved" />, <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Pressed" />, and
                <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Released" /> events in a sequence.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Input.Mouse.MouseExtensions.SimulateClick(DotNetBrowser.Input.Mouse.IMouse,DotNetBrowser.Input.Mouse.Events.MouseButton,DotNetBrowser.Dom.IElement)">
            <summary>
                Simulate mouse button click at the specified element.
            </summary>
            <param name="mouse">The mouse input simulation service.</param>
            <param name="mouseButton">The mouse button that should be used for clicking.</param>
            <param name="element">The element to click at.</param>
            <remarks>
                <para>
                    The mouse click is simulated by raising <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Moved" />, <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Pressed" />, and
                    <see cref="P:DotNetBrowser.Input.Mouse.IMouse.Released" /> events in a sequence.
                </para>
                <para> The point to click at is determined as the center of the bounding client rectangle of the specified element.</para>
            </remarks>
        </member>
        <member name="T:DotNetBrowser.Input.Touch.TouchExtensions">
            <summary>
                The touch input extension methods.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.EnvironmentVariables.AccessibilityDisabledVariable">
            <summary>
                Disables the accessibility in OSR mode on Windows if set to true.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.EnvironmentVariables.LicenseVariable">
            <summary>
                The DotNetBrowser license key.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.EnvironmentVariables.RpcTimeoutVariable">
            <summary>
                Sets the custom RPC timeout in seconds (integer value). Must be greater than zero.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.ChromiumIpc.DisposeRunningConnections">
            <summary>
                This method is used to perform running connections check
                and cleanup.
                It should be used for testing purposes only.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Chromium.AcceleratedLightweight.EnsureDisabled(System.Collections.Generic.List{System.String})">
            <summary>
                Ensure that the unsupported "accelerated" lightweight rendering from DotNetBrowser 1.x is
                not configured. The set of switches that enables this mode actually disables hardware
                acceleration, so the customers who specify this will actually get performance
                degradation.
            </summary>
            <param name="arguments">The Chromium command-line arguments to check.</param>
        </member>
        <member name="F:DotNetBrowser.Internals.Ipc.Chromium.ChromiumProcess.ProcessExitTimeout">
            <summary>
                The timeout (in milliseconds) thai is used to wait for process termination.
                After that, the Chromium process will be forcibly killed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.ConnectionServer.DisposeRunningConnections">
            <summary>
                This method is used to perform running connections check
                and cleanup.
                It should be used for testing purposes only.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Connections.IConnection.EnterNestedMode">
            <summary>
                Enters nested mode in the current thread.
                <para>
                    This method should be called before invoking the callback handler and
                    executing the user code (the user's handler implementation) in a particular thread.
                    As a result, all the RPC calls made by the users in the scope of the custom handler
                    implementation will be marked as nested.
                </para>
                <para>
                    The nested mode affects the order of processing the RPC calls by BrowserCore.
                    When a synchronous RPC callback is made from the particular Chromium thread, BrowserCore starts
                    the so-called nested loop to be able to process the RPC commands in that particular thread
                    until the synchronous callback returns.
                </para>
                <para>
                    The RPC calls marked as nested will be processed in the nested loop
                    (this means they will be processed BEFORE the synchronous RPC callback returns). The RPC
                    calls that are not marked as nested will be processed in the Chromium thread AFTER the synchronous RPC callback
                    returns.
                </para>
                <example>
                    Here is an example that demonstrates the basic usage:
                    <code>
            Connection.EnterNestedMode();
            try
            {
                return handler?.Handle(parameters);
            }
            finally
            {
               Connection.ExitNestedMode();
            }
            </code>
                </example>
            </summary>
            <remarks>
                We need to call this method explicitly only when the handler should be executed
                in a particular thread, e.g via EventTaskFactory.StartNew(). The
                <see cref="T:DotNetBrowser.Internals.Ipc.Streams.RpcCallback`3" />
                implementation does this by default for the background threads before performing general RPC callback handling.
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Connections.IConnection.ExitNestedMode">
            <summary>
                Exits nested mode in the current thread.
                <para>
                    This method should be called right after calling the callback handler in a particular thread.
                    It should be used in a combination with the <see cref="M:DotNetBrowser.Internals.Ipc.Connections.IConnection.EnterNestedMode" /> call.
                </para>
                <seealso cref="M:DotNetBrowser.Internals.Ipc.Connections.IConnection.EnterNestedMode" />
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.Ipc.Connections.RpcCommandsStub.Parameters">
            <summary>
                The parameters for configuring the RPC commands stub.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.Ipc.Connections.RpcCommandsStub.Parameters.CommandTimeout">
            <summary>
                Specifies the timeout for all RPC commands in this service.
            </summary>
            <remarks>
                <para>
                    If the response to the RPC command is not received within the timeout, the <see cref="T:System.TimeoutException" />
                    will be thrown.
                </para>
                <para>If this timeout is <c>null</c>, the default timeout (120 seconds) is used instead.</para>
            </remarks>
        </member>
        <member name="P:DotNetBrowser.Internals.Ipc.Connections.RpcCommandsStub.Parameters.ObserveConnectionClosed">
            <summary>
                Indicates whether the RPC service should be notified about the Connection.Disposed event.
            </summary>
            <remarks>
                <para>
                    This property defaults to <c>true</c>, because the RPC services observe the connection state by default and
                    mark themselves as disposed when the connection is closed.
                </para>
                <para>
                    However, subscribing a large number of RPC services to the Connection.Disposed event can lead to the delays
                    when the connection is eventually closed and all these services need to unsubscribe to prevent memory leaks.
                </para>
                <para>
                    A good example of this case are DOM and JS-related RPC services - we can have a few RPC services for each
                    object.
                    After fetching hundreds of DOM and JS objects, unsubscribing all of them during disposing the render connection
                    can cause a significant delay for the subsequent page load (tenths of seconds).
                </para>
            </remarks>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Connections.RpcCommandsStub.Parameters.#ctor(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
                Creates and initializes a new instance of <see cref="T:DotNetBrowser.Internals.Ipc.Connections.RpcCommandsStub.Parameters" />.
            </summary>
            <param name="observeConnectionClosed">
                Indicates whether the RPC service should be notified about the
                Connection.Disposed event.
            </param>
            <param name="commandTimeout">Specifies the timeout for all RPC commands in this service.</param>
            <remarks>
                See the properties documentation to understand the purpose of each parameter in more detail. In the general
                case, the default parameter values are used.
            </remarks>
        </member>
        <member name="T:DotNetBrowser.Internals.Ipc.Streams.IAsyncStreamWriter`1">
            <summary>
                A writable stream of messages.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Streams.IAsyncStreamWriter`1.CompleteAsync">
            <summary>
                Completes/closes the stream. Can only be called once there is no pending write. No writes should follow calling
                this.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.Ipc.Streams.IAsyncStreamWriter`1.WriteAsync(`0,DotNetBrowser.Internal.Rpc.Rpc.StreamMessage)">
            <summary>
                Writes a single asynchronously. Only one write can be pending at a time.
            </summary>
            <param name="originalMessage">The original stream message.</param>
            <param name="message">The message to be written. Cannot be null.</param>
        </member>
        <member name="T:DotNetBrowser.Internals.Ipc.Streams.IStreamReader`1">
            <summary>
                A stream of messages to be read.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
        </member>
        <member name="P:DotNetBrowser.Internals.Ipc.Streams.IStreamReader`1.Handler">
            <summary>
                An action that will be used to process the message as soon as it is available in the stream.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Util.TaskExtensions.WaitResult(System.Threading.Tasks.Task)">
            <summary>
                Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:DotNetBrowser.Util.TaskExtensions.WaitResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
                Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
    </members>
</doc>
